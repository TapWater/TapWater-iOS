//
//  DateExtensions.swift
//  TapWater
//
//  Created by Jonathan Hooper on 11/15/14.
//  Copyright (c) 2014 NewAperio. All rights reserved.
//

import Foundation

/*
* These NSDate extensions provide some app-specific convienence methods to the NSDate class
*/
extension NSDate {

    /*
    * Load the data from a string that would be returned by the rails app
    * @param string A string with the format "yyyy-MM-dd'T'HH:mm:ssZZZ"
    * @return The date constructed from the string. If no date can be constructed this method returns nil
    */
    class func fromRailsString(string: String) -> NSDate! {
        // Create a date formatter
        var dateFormatter: NSDateFormatter = NSDateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZ"
        dateFormatter.locale = NSLocale(localeIdentifier: "en_US_POSIX")
        dateFormatter.timeZone = NSTimeZone(forSecondsFromGMT: 0)
        
        // Return the date loaded from the string
        return dateFormatter.dateFromString(string)
        
    }
    
    /*
    * A string representation of the date that is suitable for posting to the rails app
    * @return A string with the format "yyyy-MM-dd'T'HH:mm:ssZZZ"
    */
    func toRailsString() -> String {
        // Create a date formatter
        var dateFormatter: NSDateFormatter = NSDateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZ"
        dateFormatter.locale = NSLocale(localeIdentifier: "en_US_POSIX")
        dateFormatter.timeZone = NSTimeZone(forSecondsFromGMT: 0)
        
        // Return the string generatd by the date formatter
        return dateFormatter.stringFromDate(self)
    }
    
    /*
    * A human readable string representation of the date
    * @return A string with the format "MMM dd, yyyy"
    */
    func toHumanReadableString() -> String {
        // Create a date formatter
        var dateFormatter: NSDateFormatter = NSDateFormatter()
        dateFormatter.dateFormat = "MMM dd, yyyy"
        dateFormatter.timeZone = NSTimeZone.localTimeZone()
        
        // Return the string generated by the date formatter
        return dateFormatter.stringFromDate(self)
        
    }
    
    /*
    * A human readable string representation of the date.
    * This method takes into acount the difference between this date and now
    * @return A string with the format "n sec", "n min", "n hr", or "MMM dd, yyyy"
    */
    func toHumanReadableIntervalString() -> String {
        if -1 * self.timeIntervalSinceNow < 60 {
            return NSString(format: "%i sec", -1 * Int(self.timeIntervalSinceNow))
        } else if -1 * self.timeIntervalSinceNow < 60 * 60 {
            return NSString(format: "%i min", -1 * Int(self.timeIntervalSinceNow) / 60)
        } else if self.isToday() {
            return NSString(format: "%i hr", -1 * Int(self.timeIntervalSinceNow) / 3600)
        }
        
        return self.toHumanReadableString()
    }
    
    /*
    * Determines whether or not the date falls between now and midnight the previous day
    * @return A boolean that corresponds to whether or not the date occured today
    */
    func isToday() -> Bool {
        // Create a date for 00:00:00 today
        let gregorianCalendar: NSCalendar = NSCalendar(calendarIdentifier: NSGregorianCalendar)!
        var dateComponents: NSDateComponents = gregorianCalendar.components((NSCalendarUnit.CalendarCalendarUnit | NSCalendarUnit.CalendarUnitMonth | NSCalendarUnit.CalendarUnitDay), fromDate: NSDate())
        dateComponents.hour = 0
        dateComponents.minute = 0
        dateComponents.second = 0
        let today: NSDate = gregorianCalendar.dateFromComponents(dateComponents)!
        
        // Compare this date to the date for today
        if self.timeIntervalSince1970 > today.timeIntervalSince1970 {
            return true
        } else {
            return false
        }
    }
    
    
}
